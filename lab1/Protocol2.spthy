theory Protocol2
begin

/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in encryption theories */
//Do not change the following line, i.e. do not add, change or remove anything (not even comments) in the following line.
builtins: symmetric-encryption, asymmetric-encryption

/* ---------------- */
/* Public Key Setup */
/* ---------------- */

/* The following rule should be annotated by the following action facts: 
- PubKey($A, ~ska)
*/
rule PubKey:  
    [Fr(~skI)]
    --[PubKey($I, ~skI)]->
    [!Ltk($I, ~skI), !Pk($I, pk(~skI)), Out(pk(~skI))]

/* -------------- */
/* Protocol rules */
/* -------------- */
/* The following rule should be annotated by the following action facts: 
- AliceSends($A, $B, ~ma, ~kAB, pkB)
*/
rule AliceSends:
    [Fr(~ma), Fr(~kAB), !Pk($B, pkB)]
    --[AliceSends($A, $B, ~ma, ~kAB, pkB), SecretA($A, $B, ~ma), RunningA($A, $B, ~ma)]->
    [Out(<$A, aenc(~kAB, pkB), senc(~ma, ~kAB)>), AliceSent($A, ~kAB, ~ma)]

/* The following rule should be annotated by the following action facts: 
- BobReceived($B, $A, ~mb, ma, kAB, ~skb)
*/
rule BobReceivesAndSends:
    let ma = sdec(ma_senc, adec(kAB_aenc, skB))
        kAB = adec(kAB_aenc, skB)
    in
    [Fr(~mb), In(<$A, kAB_aenc, ma_senc>), !Ltk($B, skB)]
    --[BobReceived($B, $A, ~mb, ma, kAB, skB), FinishedB($B, $A, ma, ~mb), SecretB($A, $B, ~mb), RunningB($B, $A, ~mb), CommitB($B, $A, ma)]->
    [Out(<$B, senc(~mb, kAB)>)]

/* The following rule should be annotated by the following action facts: 
- AliceReceives($A, $B, ~ma, mb, ~kAB)
*/
rule AliceReceives:
    [In(<$B, mb_senc>), AliceSent($A, kAB, ma)]
    --[FinishedA($A, $B, ma, sdec(mb_senc, kAB)), AliceReceives($A, $B, ma, sdec(mb_senc, kAB), kAB), CommitA($A, $B, sdec(mb_senc, kAB))]->
    []

/* ---------- */
/* Properties */
/* ---------- */

/* Executability check: */
//Make sure to add the action facts referred to by this lemma in your model
//Do not change this lemma, i.e. do not add, change or remove anything (not even comments) in the following three lines.
lemma executable:
exists-trace "Ex #i #j A B ma mb.
FinishedA(A, B, ma, mb)@i & FinishedB(B,A,ma,mb)@j& not (A=B)"
 
//un-comment following line for Task 1.3
lemma secrecyA:
    "All #i A B k.  SecretA(A, B, k)@#i ==> not (Ex #j. K(k)@#j )"
    /* You may only use the action facts SecretA, SecretB, and K to formulate this lemma.*/

//un-comment following line for Task 1.3
lemma secrecyB:
    "All #i A B k.  SecretB(A, B, k)@#i ==> not (Ex #j. K(k)@#j )"
    /* You may only use the action facts SecretA, SecretB, and K to formulate this lemma.*/

//un-comment following line for Task 1.4
lemma non_injectiveA:
    "All #i A B mb. CommitA(A,B,mb)@#i ==> Ex #j. RunningB(B,A,mb)@#j"
    /* You may only use the action facts CommitA, CommitB, RunningA, and RunningB to formulate this lemma.*/
//un-comment following line for Task 1.4
lemma non_injectiveB:
    "All #i A B ma. CommitB(B,A,ma)@#i ==> Ex #j. RunningA(A,B,ma)@#j"
    /* You may only use the action facts CommitA, CommitB, RunningA, and RunningB to formulate this lemma.*/


end
